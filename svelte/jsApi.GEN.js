
const axios = require("axios");


// rearrange response to be data first instead of axios error
function wrapErr( cb ) {
  return function( err ) {
    let data = ((err.response || {}).data || {})
    if( !data.error ) data.error = err.code
    data._axios = err
    cb( data )
  }
}

// rearrange response to be data first instead of axios error
function wrapOk( cb ) {
  return function( resp ) {
    let data = resp.data || {}
    data._axios = resp
    cb( data )
  }
}

// Code generated by 1_codegen_test.go DO NOT EDIT.
/**
 * @typedef {Object} DataEntryDashboardIn
 */
const DataEntryDashboardIn = {
}
/**
 * @typedef {Object} DataEntryDashboardOut
 */
const DataEntryDashboardOut = {
}
/**
 * @callback DataEntryDashboardCallback
 * @param {DataEntryDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {DataEntryDashboardIn} i
 * @param {DataEntryDashboardCallback} cb
 * @returns {Promise}
 */
exports.DataEntryDashboard = async function DataEntryDashboard( i, cb ) {
  return await axios.post( '/dataEntry/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestAutoLoginIn
 * @property {String} uid
 * @property {String} token
 * @property {String} path
 */
const GuestAutoLoginIn = {
  uid: '', // string
  token: '', // string
  path: '', // string
}
/**
 * @typedef {Object} GuestAutoLoginOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const GuestAutoLoginOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestAutoLoginCallback
 * @param {GuestAutoLoginOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestAutoLoginIn} i
 * @param {GuestAutoLoginCallback} cb
 * @returns {Promise}
 */
exports.GuestAutoLogin = async function GuestAutoLogin( i, cb ) {
  return await axios.post( '/guest/autoLogin', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestDebugIn
 */
const GuestDebugIn = {
}
/**
 * @typedef {Object} GuestDebugOut
 * @property {Object} request
 */
const GuestDebugOut = {
  request: { // RequestCommon
  }, // RequestCommon
}
/**
 * @callback GuestDebugCallback
 * @param {GuestDebugOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestDebugIn} i
 * @param {GuestDebugCallback} cb
 * @returns {Promise}
 */
exports.GuestDebug = async function GuestDebug( i, cb ) {
  return await axios.post( '/guest/debug', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestExternalAuthIn
 * @property {String} provider
 * @property {Object} redirect
 */
const GuestExternalAuthIn = {
  provider: '', // string
  redirect: false, // bool
}
/**
 * @typedef {Object} GuestExternalAuthOut
 * @property {String} link
 * @property {String} clientID
 * @property {String} redirectUrl
 * @property {Array<String>} scopes
 * @property {String} csrfState
 */
const GuestExternalAuthOut = {
  link: '', // string
  clientID: '', // string
  redirectUrl: '', // string
  scopes: [], // []string
  csrfState: '', // string
}
/**
 * @callback GuestExternalAuthCallback
 * @param {GuestExternalAuthOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestExternalAuthIn} i
 * @param {GuestExternalAuthCallback} cb
 * @returns {Promise}
 */
exports.GuestExternalAuth = async function GuestExternalAuth( i, cb ) {
  return await axios.post( '/guest/externalAuth', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestForgotPasswordIn
 * @property {String} email
 */
const GuestForgotPasswordIn = {
  email: '', // string
}
/**
 * @typedef {Object} GuestForgotPasswordOut
 * @property {Object} ok
 * @property {String} resetPassUrl
 */
const GuestForgotPasswordOut = {
  ok: false, // bool
  resetPassUrl: '', // string
}
/**
 * @callback GuestForgotPasswordCallback
 * @param {GuestForgotPasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestForgotPasswordIn} i
 * @param {GuestForgotPasswordCallback} cb
 * @returns {Promise}
 */
exports.GuestForgotPassword = async function GuestForgotPassword( i, cb ) {
  return await axios.post( '/guest/forgotPassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestLoginIn
 * @property {String} email
 * @property {String} password
 */
const GuestLoginIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestLoginOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const GuestLoginOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestLoginCallback
 * @param {GuestLoginOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestLoginIn} i
 * @param {GuestLoginCallback} cb
 * @returns {Promise}
 */
exports.GuestLogin = async function GuestLogin( i, cb ) {
  return await axios.post( '/guest/login', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestOauthCallbackIn
 * @property {String} state
 * @property {String} code
 * @property {String} accessToken
 */
const GuestOauthCallbackIn = {
  state: '', // string
  code: '', // string
  accessToken: '', // string
}
/**
 * @typedef {Object} GuestOauthCallbackOut
 * @property {Object} oauthUser
 * @property {String} email
 * @property {number} currentUser.id
 * @property {String} currentUser.email
 * @property {String} currentUser.password
 * @property {number} currentUser.createdAt
 * @property {number} currentUser.createdBy
 * @property {number} currentUser.updatedAt
 * @property {number} currentUser.updatedBy
 * @property {number} currentUser.deletedAt
 * @property {number} currentUser.passwordSetAt
 * @property {String} currentUser.secretCode
 * @property {number} currentUser.secretCodeAt
 * @property {number} currentUser.verificationSentAt
 * @property {number} currentUser.verifiedAt
 * @property {number} currentUser.lastLoginAt
 * @property {String} currentUser.fullName
 * @property {String} currentUser.tenantCode
 * @property {String} currentUser.role
 * @property {String} currentUser.invitationState
 * @property {String} provider
 * @property {Object} segments
 */
const GuestOauthCallbackOut = {
  oauthUser: { // M.SX
  }, // M.SX
  email: '', // string
  currentUser: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  provider: '', // string
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestOauthCallbackCallback
 * @param {GuestOauthCallbackOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestOauthCallbackIn} i
 * @param {GuestOauthCallbackCallback} cb
 * @returns {Promise}
 */
exports.GuestOauthCallback = async function GuestOauthCallback( i, cb ) {
  return await axios.post( '/guest/oauthCallback', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestRegisterIn
 * @property {String} email
 * @property {String} password
 */
const GuestRegisterIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestRegisterOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {String} verifyEmailUrl
 */
const GuestRegisterOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestRegisterCallback
 * @param {GuestRegisterOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestRegisterIn} i
 * @param {GuestRegisterCallback} cb
 * @returns {Promise}
 */
exports.GuestRegister = async function GuestRegister( i, cb ) {
  return await axios.post( '/guest/register', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResendVerificationEmailIn
 * @property {String} email
 */
const GuestResendVerificationEmailIn = {
  email: '', // string
}
/**
 * @typedef {Object} GuestResendVerificationEmailOut
 * @property {Object} ok
 * @property {String} verifyEmailUrl
 */
const GuestResendVerificationEmailOut = {
  ok: false, // bool
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestResendVerificationEmailCallback
 * @param {GuestResendVerificationEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResendVerificationEmailIn} i
 * @param {GuestResendVerificationEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestResendVerificationEmail = async function GuestResendVerificationEmail( i, cb ) {
  return await axios.post( '/guest/resendVerificationEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResetPasswordIn
 * @property {String} secretCode
 * @property {String} hash
 * @property {String} password
 */
const GuestResetPasswordIn = {
  secretCode: '', // string
  hash: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestResetPasswordOut
 * @property {Object} ok
 */
const GuestResetPasswordOut = {
  ok: false, // bool
}
/**
 * @callback GuestResetPasswordCallback
 * @param {GuestResetPasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResetPasswordIn} i
 * @param {GuestResetPasswordCallback} cb
 * @returns {Promise}
 */
exports.GuestResetPassword = async function GuestResetPassword( i, cb ) {
  return await axios.post( '/guest/resetPassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestVerifyEmailIn
 * @property {String} secretCode
 * @property {String} hash
 */
const GuestVerifyEmailIn = {
  secretCode: '', // string
  hash: '', // string
}
/**
 * @typedef {Object} GuestVerifyEmailOut
 * @property {Object} ok
 * @property {String} email
 */
const GuestVerifyEmailOut = {
  ok: false, // bool
  email: '', // string
}
/**
 * @callback GuestVerifyEmailCallback
 * @param {GuestVerifyEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestVerifyEmailIn} i
 * @param {GuestVerifyEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestVerifyEmail = async function GuestVerifyEmail( i, cb ) {
  return await axios.post( '/guest/verifyEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} ReportViewerDashboardIn
 */
const ReportViewerDashboardIn = {
}
/**
 * @typedef {Object} ReportViewerDashboardOut
 */
const ReportViewerDashboardOut = {
}
/**
 * @callback ReportViewerDashboardCallback
 * @param {ReportViewerDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {ReportViewerDashboardIn} i
 * @param {ReportViewerDashboardCallback} cb
 * @returns {Promise}
 */
exports.ReportViewerDashboard = async function ReportViewerDashboard( i, cb ) {
  return await axios.post( '/reportViewer/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} SuperAdminDashboardIn
 */
const SuperAdminDashboardIn = {
}
/**
 * @typedef {Object} SuperAdminDashboardOut
 */
const SuperAdminDashboardOut = {
}
/**
 * @callback SuperAdminDashboardCallback
 * @param {SuperAdminDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {SuperAdminDashboardIn} i
 * @param {SuperAdminDashboardCallback} cb
 * @returns {Promise}
 */
exports.SuperAdminDashboard = async function SuperAdminDashboard( i, cb ) {
  return await axios.post( '/superAdmin/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} SuperAdminTenantManagementIn
 * @property {String} cmd
 * @property {number} tenant.id
 * @property {String} tenant.tenantCode
 * @property {number} tenant.createdAt
 * @property {number} tenant.createdBy
 * @property {number} tenant.updatedAt
 * @property {number} tenant.updatedBy
 * @property {number} tenant.deletedAt
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const SuperAdminTenantManagementIn = {
  cmd: '', // string
  tenant: { // rqAuth.Tenants
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
  }, // rqAuth.Tenants
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} SuperAdminTenantManagementOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} tenant.id
 * @property {String} tenant.tenantCode
 * @property {number} tenant.createdAt
 * @property {number} tenant.createdBy
 * @property {number} tenant.updatedAt
 * @property {number} tenant.updatedBy
 * @property {number} tenant.deletedAt
 * @property {Object} tenants
 */
const SuperAdminTenantManagementOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  tenant: { // rqAuth.Tenants
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
  }, // rqAuth.Tenants
  tenants: { // [][]any
  }, // [][]any
}
/**
 * @callback SuperAdminTenantManagementCallback
 * @param {SuperAdminTenantManagementOut} o
 * @returns {Promise}
 */
/**
 * @param  {SuperAdminTenantManagementIn} i
 * @param {SuperAdminTenantManagementCallback} cb
 * @returns {Promise}
 */
exports.SuperAdminTenantManagement = async function SuperAdminTenantManagement( i, cb ) {
  return await axios.post( '/superAdmin/tenantManagement', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} SuperAdminUserManagementIn
 * @property {String} cmd
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const SuperAdminUserManagementIn = {
  cmd: '', // string
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} SuperAdminUserManagementOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} users
 */
const SuperAdminUserManagementOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  users: { // [][]any
  }, // [][]any
}
/**
 * @callback SuperAdminUserManagementCallback
 * @param {SuperAdminUserManagementOut} o
 * @returns {Promise}
 */
/**
 * @param  {SuperAdminUserManagementIn} i
 * @param {SuperAdminUserManagementCallback} cb
 * @returns {Promise}
 */
exports.SuperAdminUserManagement = async function SuperAdminUserManagement( i, cb ) {
  return await axios.post( '/superAdmin/userManagement', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminBankAccountsIn
 * @property {String} cmd
 * @property {number} account.id
 * @property {number} account.createdAt
 * @property {number} account.createdBy
 * @property {number} account.updatedAt
 * @property {number} account.updatedBy
 * @property {number} account.deletedAt
 * @property {String} account.name
 * @property {number} account.parentBankAccountId
 * @property {number} account.accountNumber
 * @property {String} account.bankName
 * @property {String} account.accountName
 * @property {Object} account.isProfitCenter
 * @property {Object} account.isCostCenter
 * @property {number} account.staffId
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const TenantAdminBankAccountsIn = {
  cmd: '', // string
  account: { // rqBudget.BankAccounts
    id: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    name: '', // string
    parentBankAccountId: 0, // uint64
    accountNumber: 0, // int64
    bankName: '', // string
    accountName: '', // string
    isProfitCenter: false, // bool
    isCostCenter: false, // bool
    staffId: 0, // uint64
  }, // rqBudget.BankAccounts
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} TenantAdminBankAccountsOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} account.id
 * @property {number} account.createdAt
 * @property {number} account.createdBy
 * @property {number} account.updatedAt
 * @property {number} account.updatedBy
 * @property {number} account.deletedAt
 * @property {String} account.name
 * @property {number} account.parentBankAccountId
 * @property {number} account.accountNumber
 * @property {String} account.bankName
 * @property {String} account.accountName
 * @property {Object} account.isProfitCenter
 * @property {Object} account.isCostCenter
 * @property {number} account.staffId
 * @property {Object} accounts
 */
const TenantAdminBankAccountsOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  account: { // rqBudget.BankAccounts
    id: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    name: '', // string
    parentBankAccountId: 0, // uint64
    accountNumber: 0, // int64
    bankName: '', // string
    accountName: '', // string
    isProfitCenter: false, // bool
    isCostCenter: false, // bool
    staffId: 0, // uint64
  }, // rqBudget.BankAccounts
  accounts: { // [][]any
  }, // [][]any
}
/**
 * @callback TenantAdminBankAccountsCallback
 * @param {TenantAdminBankAccountsOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminBankAccountsIn} i
 * @param {TenantAdminBankAccountsCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminBankAccounts = async function TenantAdminBankAccounts( i, cb ) {
  return await axios.post( '/tenantAdmin/bankAccounts', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminBudgetingIn
 */
const TenantAdminBudgetingIn = {
}
/**
 * @typedef {Object} TenantAdminBudgetingOut
 * @property {Object} orgs
 */
const TenantAdminBudgetingOut = {
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminBudgetingCallback
 * @param {TenantAdminBudgetingOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminBudgetingIn} i
 * @param {TenantAdminBudgetingCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminBudgeting = async function TenantAdminBudgeting( i, cb ) {
  return await axios.post( '/tenantAdmin/budgeting', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminCoaIn
 */
const TenantAdminCoaIn = {
}
/**
 * @typedef {Object} TenantAdminCoaOut
 * @property {Object} coas
 */
const TenantAdminCoaOut = {
  coas: { // []rqAuth.Coa
  }, // []rqAuth.Coa
}
/**
 * @callback TenantAdminCoaCallback
 * @param {TenantAdminCoaOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminCoaIn} i
 * @param {TenantAdminCoaCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminCoa = async function TenantAdminCoa( i, cb ) {
  return await axios.post( '/tenantAdmin/coa', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminCreateBudgetPlanIn
 * @property {String} planType
 * @property {String} title
 * @property {String} description
 * @property {number} parentId
 * @property {number} orgId
 * @property {number} perYear
 * @property {number} budgetIDR
 * @property {number} budgetUSD
 * @property {number} budgetEUR
 */
const TenantAdminCreateBudgetPlanIn = {
  planType: '', // string
  title: '', // string
  description: '', // string
  parentId: 0, // uint64
  orgId: 0, // uint64
  perYear: 0, // int64
  budgetIDR: 0, // int64
  budgetUSD: 0, // int64
  budgetEUR: 0, // int64
}
/**
 * @typedef {Object} TenantAdminCreateBudgetPlanOut
 * @property {Object} plans
 */
const TenantAdminCreateBudgetPlanOut = {
  plans: { // []rqBudget.Plans
  }, // []rqBudget.Plans
}
/**
 * @callback TenantAdminCreateBudgetPlanCallback
 * @param {TenantAdminCreateBudgetPlanOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminCreateBudgetPlanIn} i
 * @param {TenantAdminCreateBudgetPlanCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminCreateBudgetPlan = async function TenantAdminCreateBudgetPlan( i, cb ) {
  return await axios.post( '/tenantAdmin/createBudgetPlan', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminCreateCoaChildIn
 * @property {String} name
 * @property {number} parentId
 */
const TenantAdminCreateCoaChildIn = {
  name: '', // string
  parentId: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminCreateCoaChildOut
 * @property {Object} coas
 */
const TenantAdminCreateCoaChildOut = {
  coas: { // []rqAuth.Coa
  }, // []rqAuth.Coa
}
/**
 * @callback TenantAdminCreateCoaChildCallback
 * @param {TenantAdminCreateCoaChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminCreateCoaChildIn} i
 * @param {TenantAdminCreateCoaChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminCreateCoaChild = async function TenantAdminCreateCoaChild( i, cb ) {
  return await axios.post( '/tenantAdmin/createCoaChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminCreateOrganizationChildIn
 * @property {String} name
 * @property {String} headTitle
 * @property {number} parentId
 */
const TenantAdminCreateOrganizationChildIn = {
  name: '', // string
  headTitle: '', // string
  parentId: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminCreateOrganizationChildOut
 * @property {number} org.id
 * @property {String} org.tenantCode
 * @property {String} org.name
 * @property {String} org.headTitle
 * @property {number} org.parentId
 * @property {Object} org.children
 * @property {number} org.orgType
 * @property {number} org.createdAt
 * @property {number} org.createdBy
 * @property {number} org.updatedAt
 * @property {number} org.updatedBy
 * @property {number} org.deletedAt
 * @property {Object} orgs
 */
const TenantAdminCreateOrganizationChildOut = {
  org: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
  }, // rqAuth.Orgs
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminCreateOrganizationChildCallback
 * @param {TenantAdminCreateOrganizationChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminCreateOrganizationChildIn} i
 * @param {TenantAdminCreateOrganizationChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminCreateOrganizationChild = async function TenantAdminCreateOrganizationChild( i, cb ) {
  return await axios.post( '/tenantAdmin/createOrganizationChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminDashboardIn
 * @property {String} cmd
 * @property {String} staffEmail
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const TenantAdminDashboardIn = {
  cmd: '', // string
  staffEmail: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} TenantAdminDashboardOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {Object} staffs
 */
const TenantAdminDashboardOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  staffs: { // [][]any
  }, // [][]any
}
/**
 * @callback TenantAdminDashboardCallback
 * @param {TenantAdminDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminDashboardIn} i
 * @param {TenantAdminDashboardCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminDashboard = async function TenantAdminDashboard( i, cb ) {
  return await axios.post( '/tenantAdmin/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminDeleteCoaChildIn
 * @property {number} id
 */
const TenantAdminDeleteCoaChildIn = {
  id: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminDeleteCoaChildOut
 * @property {Object} coas
 */
const TenantAdminDeleteCoaChildOut = {
  coas: { // []rqAuth.Coa
  }, // []rqAuth.Coa
}
/**
 * @callback TenantAdminDeleteCoaChildCallback
 * @param {TenantAdminDeleteCoaChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminDeleteCoaChildIn} i
 * @param {TenantAdminDeleteCoaChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminDeleteCoaChild = async function TenantAdminDeleteCoaChild( i, cb ) {
  return await axios.post( '/tenantAdmin/deleteCoaChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminDeleteOrganizationChildIn
 * @property {number} id
 */
const TenantAdminDeleteOrganizationChildIn = {
  id: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminDeleteOrganizationChildOut
 * @property {Object} orgs
 */
const TenantAdminDeleteOrganizationChildOut = {
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminDeleteOrganizationChildCallback
 * @param {TenantAdminDeleteOrganizationChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminDeleteOrganizationChildIn} i
 * @param {TenantAdminDeleteOrganizationChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminDeleteOrganizationChild = async function TenantAdminDeleteOrganizationChild( i, cb ) {
  return await axios.post( '/tenantAdmin/deleteOrganizationChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminGetBudgetPlansIn
 * @property {number} orgId
 */
const TenantAdminGetBudgetPlansIn = {
  orgId: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminGetBudgetPlansOut
 * @property {Object} plans
 */
const TenantAdminGetBudgetPlansOut = {
  plans: { // []rqBudget.Plans
  }, // []rqBudget.Plans
}
/**
 * @callback TenantAdminGetBudgetPlansCallback
 * @param {TenantAdminGetBudgetPlansOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminGetBudgetPlansIn} i
 * @param {TenantAdminGetBudgetPlansCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminGetBudgetPlans = async function TenantAdminGetBudgetPlans( i, cb ) {
  return await axios.post( '/tenantAdmin/getBudgetPlans', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminMoveOrganizationChildIn
 * @property {number} id
 * @property {number} moveToIdx
 * @property {number} toParentId
 */
const TenantAdminMoveOrganizationChildIn = {
  id: 0, // uint64
  moveToIdx: 0, // int
  toParentId: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminMoveOrganizationChildOut
 * @property {number} org.id
 * @property {String} org.tenantCode
 * @property {String} org.name
 * @property {String} org.headTitle
 * @property {number} org.parentId
 * @property {Object} org.children
 * @property {number} org.orgType
 * @property {number} org.createdAt
 * @property {number} org.createdBy
 * @property {number} org.updatedAt
 * @property {number} org.updatedBy
 * @property {number} org.deletedAt
 * @property {Object} orgs
 */
const TenantAdminMoveOrganizationChildOut = {
  org: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
  }, // rqAuth.Orgs
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminMoveOrganizationChildCallback
 * @param {TenantAdminMoveOrganizationChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminMoveOrganizationChildIn} i
 * @param {TenantAdminMoveOrganizationChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminMoveOrganizationChild = async function TenantAdminMoveOrganizationChild( i, cb ) {
  return await axios.post( '/tenantAdmin/moveOrganizationChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminOrganizationIn
 */
const TenantAdminOrganizationIn = {
}
/**
 * @typedef {Object} TenantAdminOrganizationOut
 * @property {Object} orgs
 */
const TenantAdminOrganizationOut = {
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminOrganizationCallback
 * @param {TenantAdminOrganizationOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminOrganizationIn} i
 * @param {TenantAdminOrganizationCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminOrganization = async function TenantAdminOrganization( i, cb ) {
  return await axios.post( '/tenantAdmin/organization', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminRestoreCoaChildIn
 * @property {number} id
 */
const TenantAdminRestoreCoaChildIn = {
  id: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminRestoreCoaChildOut
 * @property {Object} coas
 */
const TenantAdminRestoreCoaChildOut = {
  coas: { // []rqAuth.Coa
  }, // []rqAuth.Coa
}
/**
 * @callback TenantAdminRestoreCoaChildCallback
 * @param {TenantAdminRestoreCoaChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminRestoreCoaChildIn} i
 * @param {TenantAdminRestoreCoaChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminRestoreCoaChild = async function TenantAdminRestoreCoaChild( i, cb ) {
  return await axios.post( '/tenantAdmin/restoreCoaChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminRestoreOrganizationChildIn
 * @property {number} id
 */
const TenantAdminRestoreOrganizationChildIn = {
  id: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminRestoreOrganizationChildOut
 * @property {Object} orgs
 */
const TenantAdminRestoreOrganizationChildOut = {
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminRestoreOrganizationChildCallback
 * @param {TenantAdminRestoreOrganizationChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminRestoreOrganizationChildIn} i
 * @param {TenantAdminRestoreOrganizationChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminRestoreOrganizationChild = async function TenantAdminRestoreOrganizationChild( i, cb ) {
  return await axios.post( '/tenantAdmin/restoreOrganizationChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminTransactionIn
 */
const TenantAdminTransactionIn = {
}
/**
 * @typedef {Object} TenantAdminTransactionOut
 */
const TenantAdminTransactionOut = {
}
/**
 * @callback TenantAdminTransactionCallback
 * @param {TenantAdminTransactionOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminTransactionIn} i
 * @param {TenantAdminTransactionCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminTransaction = async function TenantAdminTransaction( i, cb ) {
  return await axios.post( '/tenantAdmin/transaction', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminUpdateBudgetPlanIn
 * @property {number} id
 * @property {String} planType
 * @property {String} title
 * @property {String} description
 * @property {number} perYear
 * @property {number} budgetIDR
 * @property {number} budgetUSD
 * @property {number} budgetEUR
 */
const TenantAdminUpdateBudgetPlanIn = {
  id: 0, // uint64
  planType: '', // string
  title: '', // string
  description: '', // string
  perYear: 0, // int64
  budgetIDR: 0, // int64
  budgetUSD: 0, // int64
  budgetEUR: 0, // int64
}
/**
 * @typedef {Object} TenantAdminUpdateBudgetPlanOut
 * @property {Object} plans
 */
const TenantAdminUpdateBudgetPlanOut = {
  plans: { // []rqBudget.Plans
  }, // []rqBudget.Plans
}
/**
 * @callback TenantAdminUpdateBudgetPlanCallback
 * @param {TenantAdminUpdateBudgetPlanOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminUpdateBudgetPlanIn} i
 * @param {TenantAdminUpdateBudgetPlanCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminUpdateBudgetPlan = async function TenantAdminUpdateBudgetPlan( i, cb ) {
  return await axios.post( '/tenantAdmin/updateBudgetPlan', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminUpdateCoaChildIn
 * @property {number} id
 * @property {String} name
 */
const TenantAdminUpdateCoaChildIn = {
  id: 0, // uint64
  name: '', // string
}
/**
 * @typedef {Object} TenantAdminUpdateCoaChildOut
 * @property {Object} coas
 */
const TenantAdminUpdateCoaChildOut = {
  coas: { // []rqAuth.Coa
  }, // []rqAuth.Coa
}
/**
 * @callback TenantAdminUpdateCoaChildCallback
 * @param {TenantAdminUpdateCoaChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminUpdateCoaChildIn} i
 * @param {TenantAdminUpdateCoaChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminUpdateCoaChild = async function TenantAdminUpdateCoaChild( i, cb ) {
  return await axios.post( '/tenantAdmin/updateCoaChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminUpdateOrganizationChildIn
 * @property {number} id
 * @property {String} name
 * @property {String} headTitle
 */
const TenantAdminUpdateOrganizationChildIn = {
  id: 0, // uint64
  name: '', // string
  headTitle: '', // string
}
/**
 * @typedef {Object} TenantAdminUpdateOrganizationChildOut
 * @property {number} org.id
 * @property {String} org.tenantCode
 * @property {String} org.name
 * @property {String} org.headTitle
 * @property {number} org.parentId
 * @property {Object} org.children
 * @property {number} org.orgType
 * @property {number} org.createdAt
 * @property {number} org.createdBy
 * @property {number} org.updatedAt
 * @property {number} org.updatedBy
 * @property {number} org.deletedAt
 * @property {Object} orgs
 */
const TenantAdminUpdateOrganizationChildOut = {
  org: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
  }, // rqAuth.Orgs
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminUpdateOrganizationChildCallback
 * @param {TenantAdminUpdateOrganizationChildOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminUpdateOrganizationChildIn} i
 * @param {TenantAdminUpdateOrganizationChildCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminUpdateOrganizationChild = async function TenantAdminUpdateOrganizationChild( i, cb ) {
  return await axios.post( '/tenantAdmin/updateOrganizationChild', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserAutoLoginLinkIn
 * @property {String} path
 */
const UserAutoLoginLinkIn = {
  path: '', // string
}
/**
 * @typedef {Object} UserAutoLoginLinkOut
 * @property {String} link
 */
const UserAutoLoginLinkOut = {
  link: '', // string
}
/**
 * @callback UserAutoLoginLinkCallback
 * @param {UserAutoLoginLinkOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserAutoLoginLinkIn} i
 * @param {UserAutoLoginLinkCallback} cb
 * @returns {Promise}
 */
exports.UserAutoLoginLink = async function UserAutoLoginLink( i, cb ) {
  return await axios.post( '/user/autoLoginLink', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserChangePasswordIn
 * @property {String} oldPass
 * @property {String} newPass
 */
const UserChangePasswordIn = {
  oldPass: '', // string
  newPass: '', // string
}
/**
 * @typedef {Object} UserChangePasswordOut
 * @property {Object} ok
 */
const UserChangePasswordOut = {
  ok: false, // bool
}
/**
 * @callback UserChangePasswordCallback
 * @param {UserChangePasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserChangePasswordIn} i
 * @param {UserChangePasswordCallback} cb
 * @returns {Promise}
 */
exports.UserChangePassword = async function UserChangePassword( i, cb ) {
  return await axios.post( '/user/changePassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserCreateCompanyIn
 * @property {String} tenantCode
 * @property {String} companyName
 * @property {String} headTitle
 */
const UserCreateCompanyIn = {
  tenantCode: '', // string
  companyName: '', // string
  headTitle: '', // string
}
/**
 * @typedef {Object} UserCreateCompanyOut
 * @property {Object} ok
 * @property {number} company.id
 * @property {String} company.tenantCode
 * @property {String} company.name
 * @property {String} company.headTitle
 * @property {number} company.parentId
 * @property {Object} company.children
 * @property {number} company.orgType
 * @property {number} company.createdAt
 * @property {number} company.createdBy
 * @property {number} company.updatedAt
 * @property {number} company.updatedBy
 * @property {number} company.deletedAt
 */
const UserCreateCompanyOut = {
  ok: false, // bool
  company: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
  }, // rqAuth.Orgs
}
/**
 * @callback UserCreateCompanyCallback
 * @param {UserCreateCompanyOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserCreateCompanyIn} i
 * @param {UserCreateCompanyCallback} cb
 * @returns {Promise}
 */
exports.UserCreateCompany = async function UserCreateCompany( i, cb ) {
  return await axios.post( '/user/createCompany', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserLogoutIn
 */
const UserLogoutIn = {
}
/**
 * @typedef {Object} UserLogoutOut
 * @property {number} logoutAt
 */
const UserLogoutOut = {
  logoutAt: 0, // int64
}
/**
 * @callback UserLogoutCallback
 * @param {UserLogoutOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserLogoutIn} i
 * @param {UserLogoutCallback} cb
 * @returns {Promise}
 */
exports.UserLogout = async function UserLogout( i, cb ) {
  return await axios.post( '/user/logout', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserProfileIn
 */
const UserProfileIn = {
}
/**
 * @typedef {Object} UserProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const UserProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserProfileIn} i
 * @param {UserProfileCallback} cb
 * @returns {Promise}
 */
exports.UserProfile = async function UserProfile( i, cb ) {
  return await axios.post( '/user/profile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserResponseInvitationIn
 * @property {String} tenantCode
 * @property {String} response
 */
const UserResponseInvitationIn = {
  tenantCode: '', // string
  response: '', // string
}
/**
 * @typedef {Object} UserResponseInvitationOut
 * @property {String} message
 */
const UserResponseInvitationOut = {
  message: '', // string
}
/**
 * @callback UserResponseInvitationCallback
 * @param {UserResponseInvitationOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserResponseInvitationIn} i
 * @param {UserResponseInvitationCallback} cb
 * @returns {Promise}
 */
exports.UserResponseInvitation = async function UserResponseInvitation( i, cb ) {
  return await axios.post( '/user/responseInvitation', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserSessionKillIn
 * @property {String} sessionTokenHash
 */
const UserSessionKillIn = {
  sessionTokenHash: '', // string
}
/**
 * @typedef {Object} UserSessionKillOut
 * @property {number} logoutAt
 * @property {number} sessionTerminated
 */
const UserSessionKillOut = {
  logoutAt: 0, // int64
  sessionTerminated: 0, // int64
}
/**
 * @callback UserSessionKillCallback
 * @param {UserSessionKillOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserSessionKillIn} i
 * @param {UserSessionKillCallback} cb
 * @returns {Promise}
 */
exports.UserSessionKill = async function UserSessionKill( i, cb ) {
  return await axios.post( '/user/sessionKill', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserSessionsActiveIn
 */
const UserSessionsActiveIn = {
}
/**
 * @typedef {Object} UserSessionsActiveOut
 * @property {Object} sessionsActive
 */
const UserSessionsActiveOut = {
  sessionsActive: { // []rqAuth.Sessions
  }, // []rqAuth.Sessions
}
/**
 * @callback UserSessionsActiveCallback
 * @param {UserSessionsActiveOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserSessionsActiveIn} i
 * @param {UserSessionsActiveCallback} cb
 * @returns {Promise}
 */
exports.UserSessionsActive = async function UserSessionsActive( i, cb ) {
  return await axios.post( '/user/sessionsActive', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserUpdateProfileIn
 * @property {String} userName
 * @property {String} fullName
 * @property {String} email
 * @property {String} country
 * @property {String} language
 */
const UserUpdateProfileIn = {
  userName: '', // string
  fullName: '', // string
  email: '', // string
  country: '', // string
  language: '', // string
}
/**
 * @typedef {Object} UserUpdateProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const UserUpdateProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserUpdateProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserUpdateProfileIn} i
 * @param {UserUpdateProfileCallback} cb
 * @returns {Promise}
 */
exports.UserUpdateProfile = async function UserUpdateProfile( i, cb ) {
  return await axios.post( '/user/updateProfile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}


// Code generated by 1_codegen_test.go DO NOT EDIT.
