
const axios = require("axios");


// rearrange response to be data first instead of axios error
function wrapErr( cb ) {
  return function( err ) {
    let data = ((err.response || {}).data || {})
    if( !data.error ) data.error = err.code
    data._axios = err
    cb( data )
  }
}

// rearrange response to be data first instead of axios error
function wrapOk( cb ) {
  return function( resp ) {
    let data = resp.data || {}
    data._axios = resp
    cb( data )
  }
}

// Code generated by 1_codegen_test.go DO NOT EDIT.
/**
 * @typedef {Object} DataEntryDashboardIn
 */
const DataEntryDashboardIn = {
}
/**
 * @typedef {Object} DataEntryDashboardOut
 */
const DataEntryDashboardOut = {
}
/**
 * @callback DataEntryDashboardCallback
 * @param {DataEntryDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {DataEntryDashboardIn} i
 * @param {DataEntryDashboardCallback} cb
 * @returns {Promise}
 */
exports.DataEntryDashboard = async function DataEntryDashboard( i, cb ) {
  return await axios.post( '/dataEntry/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} DataEntryTemplateIn
 */
const DataEntryTemplateIn = {
}
/**
 * @typedef {Object} DataEntryTemplateOut
 */
const DataEntryTemplateOut = {
}
/**
 * @callback DataEntryTemplateCallback
 * @param {DataEntryTemplateOut} o
 * @returns {Promise}
 */
/**
 * @param  {DataEntryTemplateIn} i
 * @param {DataEntryTemplateCallback} cb
 * @returns {Promise}
 */
exports.DataEntryTemplate = async function DataEntryTemplate( i, cb ) {
  return await axios.post( '/dataEntry/template', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} DataEntryTemplatesIn
 */
const DataEntryTemplatesIn = {
}
/**
 * @typedef {Object} DataEntryTemplatesOut
 */
const DataEntryTemplatesOut = {
}
/**
 * @callback DataEntryTemplatesCallback
 * @param {DataEntryTemplatesOut} o
 * @returns {Promise}
 */
/**
 * @param  {DataEntryTemplatesIn} i
 * @param {DataEntryTemplatesCallback} cb
 * @returns {Promise}
 */
exports.DataEntryTemplates = async function DataEntryTemplates( i, cb ) {
  return await axios.post( '/dataEntry/templates', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} DataEntryTransactionEntryIn
 */
const DataEntryTransactionEntryIn = {
}
/**
 * @typedef {Object} DataEntryTransactionEntryOut
 */
const DataEntryTransactionEntryOut = {
}
/**
 * @callback DataEntryTransactionEntryCallback
 * @param {DataEntryTransactionEntryOut} o
 * @returns {Promise}
 */
/**
 * @param  {DataEntryTransactionEntryIn} i
 * @param {DataEntryTransactionEntryCallback} cb
 * @returns {Promise}
 */
exports.DataEntryTransactionEntry = async function DataEntryTransactionEntry( i, cb ) {
  return await axios.post( '/dataEntry/transactionEntry', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestAutoLoginIn
 * @property {String} uid
 * @property {String} token
 * @property {String} path
 */
const GuestAutoLoginIn = {
  uid: '', // string
  token: '', // string
  path: '', // string
}
/**
 * @typedef {Object} GuestAutoLoginOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const GuestAutoLoginOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestAutoLoginCallback
 * @param {GuestAutoLoginOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestAutoLoginIn} i
 * @param {GuestAutoLoginCallback} cb
 * @returns {Promise}
 */
exports.GuestAutoLogin = async function GuestAutoLogin( i, cb ) {
  return await axios.post( '/guest/autoLogin', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestDebugIn
 */
const GuestDebugIn = {
}
/**
 * @typedef {Object} GuestDebugOut
 * @property {Object} request
 */
const GuestDebugOut = {
  request: { // RequestCommon
  }, // RequestCommon
}
/**
 * @callback GuestDebugCallback
 * @param {GuestDebugOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestDebugIn} i
 * @param {GuestDebugCallback} cb
 * @returns {Promise}
 */
exports.GuestDebug = async function GuestDebug( i, cb ) {
  return await axios.post( '/guest/debug', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestExternalAuthIn
 * @property {String} provider
 * @property {Object} redirect
 */
const GuestExternalAuthIn = {
  provider: '', // string
  redirect: false, // bool
}
/**
 * @typedef {Object} GuestExternalAuthOut
 * @property {String} link
 * @property {String} clientID
 * @property {String} redirectUrl
 * @property {Array<String>} scopes
 * @property {String} csrfState
 */
const GuestExternalAuthOut = {
  link: '', // string
  clientID: '', // string
  redirectUrl: '', // string
  scopes: [], // []string
  csrfState: '', // string
}
/**
 * @callback GuestExternalAuthCallback
 * @param {GuestExternalAuthOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestExternalAuthIn} i
 * @param {GuestExternalAuthCallback} cb
 * @returns {Promise}
 */
exports.GuestExternalAuth = async function GuestExternalAuth( i, cb ) {
  return await axios.post( '/guest/externalAuth', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestForgotPasswordIn
 * @property {String} email
 */
const GuestForgotPasswordIn = {
  email: '', // string
}
/**
 * @typedef {Object} GuestForgotPasswordOut
 * @property {Object} ok
 * @property {String} resetPassUrl
 */
const GuestForgotPasswordOut = {
  ok: false, // bool
  resetPassUrl: '', // string
}
/**
 * @callback GuestForgotPasswordCallback
 * @param {GuestForgotPasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestForgotPasswordIn} i
 * @param {GuestForgotPasswordCallback} cb
 * @returns {Promise}
 */
exports.GuestForgotPassword = async function GuestForgotPassword( i, cb ) {
  return await axios.post( '/guest/forgotPassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestLoginIn
 * @property {String} email
 * @property {String} password
 */
const GuestLoginIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestLoginOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const GuestLoginOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestLoginCallback
 * @param {GuestLoginOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestLoginIn} i
 * @param {GuestLoginCallback} cb
 * @returns {Promise}
 */
exports.GuestLogin = async function GuestLogin( i, cb ) {
  return await axios.post( '/guest/login', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestOauthCallbackIn
 * @property {String} state
 * @property {String} code
 * @property {String} accessToken
 */
const GuestOauthCallbackIn = {
  state: '', // string
  code: '', // string
  accessToken: '', // string
}
/**
 * @typedef {Object} GuestOauthCallbackOut
 * @property {Object} oauthUser
 * @property {String} email
 * @property {number} currentUser.id
 * @property {String} currentUser.email
 * @property {String} currentUser.password
 * @property {number} currentUser.createdAt
 * @property {number} currentUser.createdBy
 * @property {number} currentUser.updatedAt
 * @property {number} currentUser.updatedBy
 * @property {number} currentUser.deletedAt
 * @property {number} currentUser.passwordSetAt
 * @property {String} currentUser.secretCode
 * @property {number} currentUser.secretCodeAt
 * @property {number} currentUser.verificationSentAt
 * @property {number} currentUser.verifiedAt
 * @property {number} currentUser.lastLoginAt
 * @property {String} currentUser.fullName
 * @property {String} currentUser.tenantCode
 * @property {String} currentUser.role
 * @property {String} currentUser.invitationState
 * @property {String} provider
 * @property {Object} segments
 */
const GuestOauthCallbackOut = {
  oauthUser: { // M.SX
  }, // M.SX
  email: '', // string
  currentUser: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  provider: '', // string
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback GuestOauthCallbackCallback
 * @param {GuestOauthCallbackOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestOauthCallbackIn} i
 * @param {GuestOauthCallbackCallback} cb
 * @returns {Promise}
 */
exports.GuestOauthCallback = async function GuestOauthCallback( i, cb ) {
  return await axios.post( '/guest/oauthCallback', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestRegisterIn
 * @property {String} email
 * @property {String} password
 */
const GuestRegisterIn = {
  email: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestRegisterOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {String} verifyEmailUrl
 */
const GuestRegisterOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestRegisterCallback
 * @param {GuestRegisterOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestRegisterIn} i
 * @param {GuestRegisterCallback} cb
 * @returns {Promise}
 */
exports.GuestRegister = async function GuestRegister( i, cb ) {
  return await axios.post( '/guest/register', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResendVerificationEmailIn
 * @property {String} email
 */
const GuestResendVerificationEmailIn = {
  email: '', // string
}
/**
 * @typedef {Object} GuestResendVerificationEmailOut
 * @property {Object} ok
 * @property {String} verifyEmailUrl
 */
const GuestResendVerificationEmailOut = {
  ok: false, // bool
  verifyEmailUrl: '', // string
}
/**
 * @callback GuestResendVerificationEmailCallback
 * @param {GuestResendVerificationEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResendVerificationEmailIn} i
 * @param {GuestResendVerificationEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestResendVerificationEmail = async function GuestResendVerificationEmail( i, cb ) {
  return await axios.post( '/guest/resendVerificationEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestResetPasswordIn
 * @property {String} secretCode
 * @property {String} hash
 * @property {String} password
 */
const GuestResetPasswordIn = {
  secretCode: '', // string
  hash: '', // string
  password: '', // string
}
/**
 * @typedef {Object} GuestResetPasswordOut
 * @property {Object} ok
 */
const GuestResetPasswordOut = {
  ok: false, // bool
}
/**
 * @callback GuestResetPasswordCallback
 * @param {GuestResetPasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestResetPasswordIn} i
 * @param {GuestResetPasswordCallback} cb
 * @returns {Promise}
 */
exports.GuestResetPassword = async function GuestResetPassword( i, cb ) {
  return await axios.post( '/guest/resetPassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} GuestVerifyEmailIn
 * @property {String} secretCode
 * @property {String} hash
 */
const GuestVerifyEmailIn = {
  secretCode: '', // string
  hash: '', // string
}
/**
 * @typedef {Object} GuestVerifyEmailOut
 * @property {Object} ok
 * @property {String} email
 */
const GuestVerifyEmailOut = {
  ok: false, // bool
  email: '', // string
}
/**
 * @callback GuestVerifyEmailCallback
 * @param {GuestVerifyEmailOut} o
 * @returns {Promise}
 */
/**
 * @param  {GuestVerifyEmailIn} i
 * @param {GuestVerifyEmailCallback} cb
 * @returns {Promise}
 */
exports.GuestVerifyEmail = async function GuestVerifyEmail( i, cb ) {
  return await axios.post( '/guest/verifyEmail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} ReportViewerDashboardIn
 */
const ReportViewerDashboardIn = {
}
/**
 * @typedef {Object} ReportViewerDashboardOut
 */
const ReportViewerDashboardOut = {
}
/**
 * @callback ReportViewerDashboardCallback
 * @param {ReportViewerDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {ReportViewerDashboardIn} i
 * @param {ReportViewerDashboardCallback} cb
 * @returns {Promise}
 */
exports.ReportViewerDashboard = async function ReportViewerDashboard( i, cb ) {
  return await axios.post( '/reportViewer/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} SuperAdminAccessLogIn
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} withMeta
 */
const SuperAdminAccessLogIn = {
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  withMeta: false, // bool
}
/**
 * @typedef {Object} SuperAdminAccessLogOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} logs
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 */
const SuperAdminAccessLogOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  logs: { // []saAuth.ActionLogs
  }, // []saAuth.ActionLogs
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
}
/**
 * @callback SuperAdminAccessLogCallback
 * @param {SuperAdminAccessLogOut} o
 * @returns {Promise}
 */
/**
 * @param  {SuperAdminAccessLogIn} i
 * @param {SuperAdminAccessLogCallback} cb
 * @returns {Promise}
 */
exports.SuperAdminAccessLog = async function SuperAdminAccessLog( i, cb ) {
  return await axios.post( '/superAdmin/accessLog', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} SuperAdminDashboardIn
 */
const SuperAdminDashboardIn = {
}
/**
 * @typedef {Object} SuperAdminDashboardOut
 * @property {number} registeredUserTotal
 * @property {number} registeredUserToday
 * @property {Object} requestsPerDate
 * @property {Object} uniqueUserPerDate
 * @property {Object} uniqueIpPerDate
 * @property {Object} countPerActionsPerDate
 */
const SuperAdminDashboardOut = {
  registeredUserTotal: 0, // int64
  registeredUserToday: 0, // int64
  requestsPerDate: { // map[string]int
  }, // map[string]int
  uniqueUserPerDate: { // map[string]int
  }, // map[string]int
  uniqueIpPerDate: { // map[string]int
  }, // map[string]int
  countPerActionsPerDate: { // map[string]map[string]int
  }, // map[string]map[string]int
}
/**
 * @callback SuperAdminDashboardCallback
 * @param {SuperAdminDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {SuperAdminDashboardIn} i
 * @param {SuperAdminDashboardCallback} cb
 * @returns {Promise}
 */
exports.SuperAdminDashboard = async function SuperAdminDashboard( i, cb ) {
  return await axios.post( '/superAdmin/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} SuperAdminTenantManagementIn
 * @property {String} cmd
 * @property {number} tenant.id
 * @property {String} tenant.tenantCode
 * @property {number} tenant.createdAt
 * @property {number} tenant.createdBy
 * @property {number} tenant.updatedAt
 * @property {number} tenant.updatedBy
 * @property {number} tenant.deletedAt
 * @property {number} tenant.productsCoaId
 * @property {number} tenant.suppliersCoaId
 * @property {number} tenant.customersCoaId
 * @property {number} tenant.staffsCoaId
 * @property {number} tenant.banksCoaId
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const SuperAdminTenantManagementIn = {
  cmd: '', // string
  tenant: { // rqAuth.Tenants
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    productsCoaId: 0, // uint64
    suppliersCoaId: 0, // uint64
    customersCoaId: 0, // uint64
    staffsCoaId: 0, // uint64
    banksCoaId: 0, // uint64
  }, // rqAuth.Tenants
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} SuperAdminTenantManagementOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} tenant.id
 * @property {String} tenant.tenantCode
 * @property {number} tenant.createdAt
 * @property {number} tenant.createdBy
 * @property {number} tenant.updatedAt
 * @property {number} tenant.updatedBy
 * @property {number} tenant.deletedAt
 * @property {number} tenant.productsCoaId
 * @property {number} tenant.suppliersCoaId
 * @property {number} tenant.customersCoaId
 * @property {number} tenant.staffsCoaId
 * @property {number} tenant.banksCoaId
 * @property {Object} tenants
 */
const SuperAdminTenantManagementOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  tenant: { // rqAuth.Tenants
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    productsCoaId: 0, // uint64
    suppliersCoaId: 0, // uint64
    customersCoaId: 0, // uint64
    staffsCoaId: 0, // uint64
    banksCoaId: 0, // uint64
  }, // rqAuth.Tenants
  tenants: { // [][]any
  }, // [][]any
}
/**
 * @callback SuperAdminTenantManagementCallback
 * @param {SuperAdminTenantManagementOut} o
 * @returns {Promise}
 */
/**
 * @param  {SuperAdminTenantManagementIn} i
 * @param {SuperAdminTenantManagementCallback} cb
 * @returns {Promise}
 */
exports.SuperAdminTenantManagement = async function SuperAdminTenantManagement( i, cb ) {
  return await axios.post( '/superAdmin/tenantManagement', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} SuperAdminUserManagementIn
 * @property {String} cmd
 * @property {String} tenantAdmin
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const SuperAdminUserManagementIn = {
  cmd: '', // string
  tenantAdmin: '', // string
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} SuperAdminUserManagementOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} users
 */
const SuperAdminUserManagementOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  users: { // [][]any
  }, // [][]any
}
/**
 * @callback SuperAdminUserManagementCallback
 * @param {SuperAdminUserManagementOut} o
 * @returns {Promise}
 */
/**
 * @param  {SuperAdminUserManagementIn} i
 * @param {SuperAdminUserManagementCallback} cb
 * @returns {Promise}
 */
exports.SuperAdminUserManagement = async function SuperAdminUserManagement( i, cb ) {
  return await axios.post( '/superAdmin/userManagement', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminBankAccountsIn
 * @property {String} cmd
 * @property {number} account.id
 * @property {String} account.tenantCode
 * @property {number} account.createdAt
 * @property {number} account.createdBy
 * @property {number} account.updatedAt
 * @property {number} account.updatedBy
 * @property {number} account.deletedAt
 * @property {number} account.deletedBy
 * @property {number} account.restoredBy
 * @property {String} account.name
 * @property {number} account.parentBankAccountId
 * @property {number} account.childBankAccountId
 * @property {number} account.accountNumber
 * @property {String} account.bankName
 * @property {String} account.accountName
 * @property {Object} account.isProfitCenter
 * @property {Object} account.isCostCenter
 * @property {number} account.staffId
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const TenantAdminBankAccountsIn = {
  cmd: '', // string
  account: { // rqBudget.BankAccounts
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    name: '', // string
    parentBankAccountId: 0, // uint64
    childBankAccountId: 0, // uint64
    accountNumber: 0, // int64
    bankName: '', // string
    accountName: '', // string
    isProfitCenter: false, // bool
    isCostCenter: false, // bool
    staffId: 0, // uint64
  }, // rqBudget.BankAccounts
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} TenantAdminBankAccountsOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {Object} staffs
 * @property {number} account.id
 * @property {String} account.tenantCode
 * @property {number} account.createdAt
 * @property {number} account.createdBy
 * @property {number} account.updatedAt
 * @property {number} account.updatedBy
 * @property {number} account.deletedAt
 * @property {number} account.deletedBy
 * @property {number} account.restoredBy
 * @property {String} account.name
 * @property {number} account.parentBankAccountId
 * @property {number} account.childBankAccountId
 * @property {number} account.accountNumber
 * @property {String} account.bankName
 * @property {String} account.accountName
 * @property {Object} account.isProfitCenter
 * @property {Object} account.isCostCenter
 * @property {number} account.staffId
 * @property {Object} accounts
 */
const TenantAdminBankAccountsOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  staffs: { // []rqAuth.Staff
  }, // []rqAuth.Staff
  account: { // rqBudget.BankAccounts
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    name: '', // string
    parentBankAccountId: 0, // uint64
    childBankAccountId: 0, // uint64
    accountNumber: 0, // int64
    bankName: '', // string
    accountName: '', // string
    isProfitCenter: false, // bool
    isCostCenter: false, // bool
    staffId: 0, // uint64
  }, // rqBudget.BankAccounts
  accounts: { // [][]any
  }, // [][]any
}
/**
 * @callback TenantAdminBankAccountsCallback
 * @param {TenantAdminBankAccountsOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminBankAccountsIn} i
 * @param {TenantAdminBankAccountsCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminBankAccounts = async function TenantAdminBankAccounts( i, cb ) {
  return await axios.post( '/tenantAdmin/bankAccounts', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminBudgetingIn
 * @property {String} cmd
 * @property {number} orgId
 * @property {number} plan.id
 * @property {String} plan.tenantCode
 * @property {String} plan.planType
 * @property {number} plan.parentId
 * @property {number} plan.createdAt
 * @property {number} plan.createdBy
 * @property {number} plan.updatedAt
 * @property {number} plan.updatedBy
 * @property {number} plan.deletedAt
 * @property {number} plan.deletedBy
 * @property {number} plan.restoredBy
 * @property {String} plan.title
 * @property {String} plan.description
 * @property {number} plan.orgId
 * @property {number} plan.yearOf
 * @property {number} plan.budgetIDR
 * @property {number} plan.budgetUSD
 * @property {number} plan.quantity
 * @property {String} plan.unit
 */
const TenantAdminBudgetingIn = {
  cmd: '', // string
  orgId: 0, // uint64
  plan: { // rqBudget.Plans
    id: 0, // uint64
    tenantCode: '', // string
    planType: '', // string
    parentId: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    title: '', // string
    description: '', // string
    orgId: 0, // uint64
    yearOf: 0, // uint64
    budgetIDR: 0, // uint64
    budgetUSD: 0, // uint64
    quantity: 0, // uint64
    unit: '', // string
  }, // rqBudget.Plans
}
/**
 * @typedef {Object} TenantAdminBudgetingOut
 * @property {Object} orgs
 * @property {Object} plans
 */
const TenantAdminBudgetingOut = {
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
  plans: { // []rqBudget.Plans
  }, // []rqBudget.Plans
}
/**
 * @callback TenantAdminBudgetingCallback
 * @param {TenantAdminBudgetingOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminBudgetingIn} i
 * @param {TenantAdminBudgetingCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminBudgeting = async function TenantAdminBudgeting( i, cb ) {
  return await axios.post( '/tenantAdmin/budgeting', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminCoaIn
 * @property {String} cmd
 * @property {number} coa.id
 * @property {String} coa.tenantCode
 * @property {String} coa.name
 * @property {String} coa.label
 * @property {number} coa.parentId
 * @property {Object} coa.children
 * @property {number} coa.createdAt
 * @property {number} coa.createdBy
 * @property {number} coa.updatedAt
 * @property {number} coa.updatedBy
 * @property {number} coa.deletedAt
 * @property {number} coa.deletedBy
 * @property {number} coa.restoredBy
 * @property {number} moveToIdx
 * @property {number} toParentId
 */
const TenantAdminCoaIn = {
  cmd: '', // string
  coa: { // rqFinance.Coa
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    label: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqFinance.Coa
  moveToIdx: 0, // int
  toParentId: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminCoaOut
 * @property {number} coa.id
 * @property {String} coa.tenantCode
 * @property {String} coa.name
 * @property {String} coa.label
 * @property {number} coa.parentId
 * @property {Object} coa.children
 * @property {number} coa.createdAt
 * @property {number} coa.createdBy
 * @property {number} coa.updatedAt
 * @property {number} coa.updatedBy
 * @property {number} coa.deletedAt
 * @property {number} coa.deletedBy
 * @property {number} coa.restoredBy
 * @property {Object} coas
 */
const TenantAdminCoaOut = {
  coa: { // rqFinance.Coa
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    label: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqFinance.Coa
  coas: { // []rqFinance.Coa
  }, // []rqFinance.Coa
}
/**
 * @callback TenantAdminCoaCallback
 * @param {TenantAdminCoaOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminCoaIn} i
 * @param {TenantAdminCoaCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminCoa = async function TenantAdminCoa( i, cb ) {
  return await axios.post( '/tenantAdmin/coa', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminDashboardIn
 * @property {String} cmd
 * @property {String} staffEmail
 * @property {String} staffRole
 * @property {String} tenantCode
 * @property {String} role
 * @property {Object} isEdit
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const TenantAdminDashboardIn = {
  cmd: '', // string
  staffEmail: '', // string
  staffRole: '', // string
  tenantCode: '', // string
  role: '', // string
  isEdit: false, // bool
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} TenantAdminDashboardOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {Object} staffs
 * @property {Object} staffsForm
 */
const TenantAdminDashboardOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  staffs: { // [][]any
  }, // [][]any
  staffsForm: { // []rqAuth.Staff
  }, // []rqAuth.Staff
}
/**
 * @callback TenantAdminDashboardCallback
 * @param {TenantAdminDashboardOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminDashboardIn} i
 * @param {TenantAdminDashboardCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminDashboard = async function TenantAdminDashboard( i, cb ) {
  return await axios.post( '/tenantAdmin/dashboard', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminInventoryChangesIn
 * @property {String} cmd
 * @property {number} productId
 * @property {number} inventoryChange.id
 * @property {String} inventoryChange.tenantCode
 * @property {number} inventoryChange.createdAt
 * @property {number} inventoryChange.createdBy
 * @property {number} inventoryChange.updatedAt
 * @property {number} inventoryChange.updatedBy
 * @property {number} inventoryChange.deletedAt
 * @property {number} inventoryChange.deletedBy
 * @property {number} inventoryChange.restoredBy
 * @property {number} inventoryChange.stockDelta
 * @property {number} inventoryChange.productId
 * @property {number} inventoryChange.locationId
 * @property {number} inventoryChange.spendingId
 * @property {number} inventoryChange.expenseId
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 */
const TenantAdminInventoryChangesIn = {
  cmd: '', // string
  productId: 0, // uint64
  inventoryChange: { // rqBusiness.InventoryChanges
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    stockDelta: 0, // uint64
    productId: 0, // uint64
    locationId: 0, // uint64
    spendingId: 0, // uint64
    expenseId: 0, // uint64
  }, // rqBusiness.InventoryChanges
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
}
/**
 * @typedef {Object} TenantAdminInventoryChangesOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {Object} inventoryChanges
 */
const TenantAdminInventoryChangesOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  inventoryChanges: { // [][]any
  }, // [][]any
}
/**
 * @callback TenantAdminInventoryChangesCallback
 * @param {TenantAdminInventoryChangesOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminInventoryChangesIn} i
 * @param {TenantAdminInventoryChangesCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminInventoryChanges = async function TenantAdminInventoryChanges( i, cb ) {
  return await axios.post( '/tenantAdmin/inventoryChanges', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminInventoryChangesProductIn
 */
const TenantAdminInventoryChangesProductIn = {
}
/**
 * @typedef {Object} TenantAdminInventoryChangesProductOut
 */
const TenantAdminInventoryChangesProductOut = {
}
/**
 * @callback TenantAdminInventoryChangesProductCallback
 * @param {TenantAdminInventoryChangesProductOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminInventoryChangesProductIn} i
 * @param {TenantAdminInventoryChangesProductCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminInventoryChangesProduct = async function TenantAdminInventoryChangesProduct( i, cb ) {
  return await axios.post( '/tenantAdmin/inventoryChanges/', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminLocationsIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} location.id
 * @property {String} location.tenantCode
 * @property {number} location.createdAt
 * @property {number} location.createdBy
 * @property {number} location.updatedAt
 * @property {number} location.updatedBy
 * @property {number} location.deletedAt
 * @property {number} location.deletedBy
 * @property {number} location.restoredBy
 * @property {String} location.name
 * @property {String} location.country
 * @property {String} location.stateProvice
 * @property {String} location.cityRegency
 * @property {String} location.subdistrict
 * @property {String} location.village
 * @property {String} location.rwBanjar
 * @property {String} location.rtNeigb
 * @property {String} location.address
 * @property {number} location.lat
 * @property {number} location.lng
 */
const TenantAdminLocationsIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  location: { // rqBusiness.Locations
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    name: '', // string
    country: '', // string
    stateProvice: '', // string
    cityRegency: '', // string
    subdistrict: '', // string
    village: '', // string
    rwBanjar: '', // string
    rtNeigb: '', // string
    address: '', // string
    lat: 0, // float64
    lng: 0, // float64
  }, // rqBusiness.Locations
}
/**
 * @typedef {Object} TenantAdminLocationsOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} location.id
 * @property {String} location.tenantCode
 * @property {number} location.createdAt
 * @property {number} location.createdBy
 * @property {number} location.updatedAt
 * @property {number} location.updatedBy
 * @property {number} location.deletedAt
 * @property {number} location.deletedBy
 * @property {number} location.restoredBy
 * @property {String} location.name
 * @property {String} location.country
 * @property {String} location.stateProvice
 * @property {String} location.cityRegency
 * @property {String} location.subdistrict
 * @property {String} location.village
 * @property {String} location.rwBanjar
 * @property {String} location.rtNeigb
 * @property {String} location.address
 * @property {number} location.lat
 * @property {number} location.lng
 * @property {Object} locations
 */
const TenantAdminLocationsOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  location: { // rqBusiness.Locations
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    name: '', // string
    country: '', // string
    stateProvice: '', // string
    cityRegency: '', // string
    subdistrict: '', // string
    village: '', // string
    rwBanjar: '', // string
    rtNeigb: '', // string
    address: '', // string
    lat: 0, // float64
    lng: 0, // float64
  }, // rqBusiness.Locations
  locations: { // [][]any
  }, // [][]any
}
/**
 * @callback TenantAdminLocationsCallback
 * @param {TenantAdminLocationsOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminLocationsIn} i
 * @param {TenantAdminLocationsCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminLocations = async function TenantAdminLocations( i, cb ) {
  return await axios.post( '/tenantAdmin/locations', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminOrganizationIn
 * @property {String} cmd
 * @property {number} org.id
 * @property {String} org.tenantCode
 * @property {String} org.name
 * @property {String} org.headTitle
 * @property {number} org.parentId
 * @property {Object} org.children
 * @property {number} org.orgType
 * @property {number} org.createdAt
 * @property {number} org.createdBy
 * @property {number} org.updatedAt
 * @property {number} org.updatedBy
 * @property {number} org.deletedAt
 * @property {number} org.deletedBy
 * @property {number} org.restoredBy
 * @property {number} moveToIdx
 * @property {number} toParentId
 */
const TenantAdminOrganizationIn = {
  cmd: '', // string
  org: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqAuth.Orgs
  moveToIdx: 0, // int
  toParentId: 0, // uint64
}
/**
 * @typedef {Object} TenantAdminOrganizationOut
 * @property {number} org.id
 * @property {String} org.tenantCode
 * @property {String} org.name
 * @property {String} org.headTitle
 * @property {number} org.parentId
 * @property {Object} org.children
 * @property {number} org.orgType
 * @property {number} org.createdAt
 * @property {number} org.createdBy
 * @property {number} org.updatedAt
 * @property {number} org.updatedBy
 * @property {number} org.deletedAt
 * @property {number} org.deletedBy
 * @property {number} org.restoredBy
 * @property {Object} orgs
 */
const TenantAdminOrganizationOut = {
  org: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqAuth.Orgs
  orgs: { // []rqAuth.Orgs
  }, // []rqAuth.Orgs
}
/**
 * @callback TenantAdminOrganizationCallback
 * @param {TenantAdminOrganizationOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminOrganizationIn} i
 * @param {TenantAdminOrganizationCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminOrganization = async function TenantAdminOrganization( i, cb ) {
  return await axios.post( '/tenantAdmin/organization', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminProductsIn
 * @property {String} cmd
 * @property {Object} withMeta
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {number} product.id
 * @property {String} product.tenantCode
 * @property {number} product.createdAt
 * @property {number} product.createdBy
 * @property {number} product.updatedAt
 * @property {number} product.updatedBy
 * @property {number} product.deletedAt
 * @property {number} product.deletedBy
 * @property {number} product.restoredBy
 * @property {String} product.name
 * @property {String} product.detail
 * @property {String} product.rule
 * @property {String} product.kind
 * @property {number} product.cogsIDR
 * @property {number} product.profitPercentage
 */
const TenantAdminProductsIn = {
  cmd: '', // string
  withMeta: false, // bool
  pager: { // zCrud.PagerIn
    page: 0, // int
    perPage: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerIn
  product: { // rqBusiness.Products
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    name: '', // string
    detail: '', // string
    rule: '', // string
    kind: '', // string
    cogsIDR: 0, // uint64
    profitPercentage: 0, // float64
  }, // rqBusiness.Products
}
/**
 * @typedef {Object} TenantAdminProductsOut
 * @property {number} pager.page
 * @property {number} pager.perPage
 * @property {number} pager.pages
 * @property {number} pager.total
 * @property {Object} pager.filters
 * @property {Array<String>} pager.order
 * @property {Object} meta.fields
 * @property {Object} meta.mutex
 * @property {String} meta.cachedSelect
 * @property {number} product.id
 * @property {String} product.tenantCode
 * @property {number} product.createdAt
 * @property {number} product.createdBy
 * @property {number} product.updatedAt
 * @property {number} product.updatedBy
 * @property {number} product.deletedAt
 * @property {number} product.deletedBy
 * @property {number} product.restoredBy
 * @property {String} product.name
 * @property {String} product.detail
 * @property {String} product.rule
 * @property {String} product.kind
 * @property {number} product.cogsIDR
 * @property {number} product.profitPercentage
 * @property {Object} products
 */
const TenantAdminProductsOut = {
  pager: { // zCrud.PagerOut
    page: 0, // int
    perPage: 0, // int
    pages: 0, // int
    total: 0, // int
    filters: { // map[string][]string
    }, // map[string][]string
    order: [], // []string
  }, // zCrud.PagerOut
  meta: { // zCrud.Meta
    fields: { // []Field
    }, // []Field
    mutex: { // sync.Mutex
    }, // sync.Mutex
    cachedSelect: '', // string
  }, // zCrud.Meta
  product: { // rqBusiness.Products
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    name: '', // string
    detail: '', // string
    rule: '', // string
    kind: '', // string
    cogsIDR: 0, // uint64
    profitPercentage: 0, // float64
  }, // rqBusiness.Products
  products: { // [][]any
  }, // [][]any
}
/**
 * @callback TenantAdminProductsCallback
 * @param {TenantAdminProductsOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminProductsIn} i
 * @param {TenantAdminProductsCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminProducts = async function TenantAdminProducts( i, cb ) {
  return await axios.post( '/tenantAdmin/products', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminSyncCoaIn
 * @property {number} tenant.id
 * @property {String} tenant.tenantCode
 * @property {number} tenant.createdAt
 * @property {number} tenant.createdBy
 * @property {number} tenant.updatedAt
 * @property {number} tenant.updatedBy
 * @property {number} tenant.deletedAt
 * @property {number} tenant.productsCoaId
 * @property {number} tenant.suppliersCoaId
 * @property {number} tenant.customersCoaId
 * @property {number} tenant.staffsCoaId
 * @property {number} tenant.banksCoaId
 */
const TenantAdminSyncCoaIn = {
  tenant: { // rqAuth.Tenants
    id: 0, // uint64
    tenantCode: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    productsCoaId: 0, // uint64
    suppliersCoaId: 0, // uint64
    customersCoaId: 0, // uint64
    staffsCoaId: 0, // uint64
    banksCoaId: 0, // uint64
  }, // rqAuth.Tenants
}
/**
 * @typedef {Object} TenantAdminSyncCoaOut
 */
const TenantAdminSyncCoaOut = {
}
/**
 * @callback TenantAdminSyncCoaCallback
 * @param {TenantAdminSyncCoaOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminSyncCoaIn} i
 * @param {TenantAdminSyncCoaCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminSyncCoa = async function TenantAdminSyncCoa( i, cb ) {
  return await axios.post( '/tenantAdmin/syncCoa', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminTransactionIn
 */
const TenantAdminTransactionIn = {
}
/**
 * @typedef {Object} TenantAdminTransactionOut
 */
const TenantAdminTransactionOut = {
}
/**
 * @callback TenantAdminTransactionCallback
 * @param {TenantAdminTransactionOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminTransactionIn} i
 * @param {TenantAdminTransactionCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminTransaction = async function TenantAdminTransaction( i, cb ) {
  return await axios.post( '/tenantAdmin/transaction', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminTransactionTemplateIn
 * @property {String} cmd
 * @property {number} transactionTemplate.id
 * @property {String} transactionTemplate.tenantCode
 * @property {String} transactionTemplate.name
 * @property {String} transactionTemplate.color
 * @property {String} transactionTemplate.imageURL
 * @property {number} transactionTemplate.createdAt
 * @property {number} transactionTemplate.createdBy
 * @property {number} transactionTemplate.updatedAt
 * @property {number} transactionTemplate.updatedBy
 * @property {number} transactionTemplate.deletedAt
 * @property {number} transactionTemplate.deletedBy
 * @property {number} transactionTemplate.restoredBy
 */
const TenantAdminTransactionTemplateIn = {
  cmd: '', // string
  transactionTemplate: { // rqFinance.TransactionTemplate
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    color: '', // string
    imageURL: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqFinance.TransactionTemplate
}
/**
 * @typedef {Object} TenantAdminTransactionTemplateOut
 * @property {Object} transactionTemplates
 * @property {number} transactionTemplate.id
 * @property {String} transactionTemplate.tenantCode
 * @property {String} transactionTemplate.name
 * @property {String} transactionTemplate.color
 * @property {String} transactionTemplate.imageURL
 * @property {number} transactionTemplate.createdAt
 * @property {number} transactionTemplate.createdBy
 * @property {number} transactionTemplate.updatedAt
 * @property {number} transactionTemplate.updatedBy
 * @property {number} transactionTemplate.deletedAt
 * @property {number} transactionTemplate.deletedBy
 * @property {number} transactionTemplate.restoredBy
 */
const TenantAdminTransactionTemplateOut = {
  transactionTemplates: { // []rqFinance.TransactionTemplate
  }, // []rqFinance.TransactionTemplate
  transactionTemplate: { // rqFinance.TransactionTemplate
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    color: '', // string
    imageURL: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqFinance.TransactionTemplate
}
/**
 * @callback TenantAdminTransactionTemplateCallback
 * @param {TenantAdminTransactionTemplateOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminTransactionTemplateIn} i
 * @param {TenantAdminTransactionTemplateCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminTransactionTemplate = async function TenantAdminTransactionTemplate( i, cb ) {
  return await axios.post( '/tenantAdmin/transactionTemplate', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} TenantAdminTransactionTplDetailIn
 * @property {String} cmd
 * @property {number} transactionTplDetail.id
 * @property {number} transactionTplDetail.parentId
 * @property {String} transactionTplDetail.tenantCode
 * @property {number} transactionTplDetail.coaId
 * @property {Object} transactionTplDetail.isDebit
 * @property {number} transactionTplDetail.createdAt
 * @property {number} transactionTplDetail.createdBy
 * @property {number} transactionTplDetail.updatedAt
 * @property {number} transactionTplDetail.updatedBy
 * @property {number} transactionTplDetail.deletedAt
 * @property {number} transactionTplDetail.deletedBy
 * @property {number} transactionTplDetail.restoredBy
 * @property {Object} transactionTplDetail.attributes
 */
const TenantAdminTransactionTplDetailIn = {
  cmd: '', // string
  transactionTplDetail: { // rqFinance.TransactionTplDetail
    id: 0, // uint64
    parentId: 0, // uint64
    tenantCode: '', // string
    coaId: 0, // uint64
    isDebit: false, // bool
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    attributes: { // []any
    }, // []any
  }, // rqFinance.TransactionTplDetail
}
/**
 * @typedef {Object} TenantAdminTransactionTplDetailOut
 * @property {number} transactionTplDetail.id
 * @property {number} transactionTplDetail.parentId
 * @property {String} transactionTplDetail.tenantCode
 * @property {number} transactionTplDetail.coaId
 * @property {Object} transactionTplDetail.isDebit
 * @property {number} transactionTplDetail.createdAt
 * @property {number} transactionTplDetail.createdBy
 * @property {number} transactionTplDetail.updatedAt
 * @property {number} transactionTplDetail.updatedBy
 * @property {number} transactionTplDetail.deletedAt
 * @property {number} transactionTplDetail.deletedBy
 * @property {number} transactionTplDetail.restoredBy
 * @property {Object} transactionTplDetail.attributes
 * @property {Object} transactionTplDetails
 */
const TenantAdminTransactionTplDetailOut = {
  transactionTplDetail: { // rqFinance.TransactionTplDetail
    id: 0, // uint64
    parentId: 0, // uint64
    tenantCode: '', // string
    coaId: 0, // uint64
    isDebit: false, // bool
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
    attributes: { // []any
    }, // []any
  }, // rqFinance.TransactionTplDetail
  transactionTplDetails: { // []rqFinance.TransactionTplDetail
  }, // []rqFinance.TransactionTplDetail
}
/**
 * @callback TenantAdminTransactionTplDetailCallback
 * @param {TenantAdminTransactionTplDetailOut} o
 * @returns {Promise}
 */
/**
 * @param  {TenantAdminTransactionTplDetailIn} i
 * @param {TenantAdminTransactionTplDetailCallback} cb
 * @returns {Promise}
 */
exports.TenantAdminTransactionTplDetail = async function TenantAdminTransactionTplDetail( i, cb ) {
  return await axios.post( '/tenantAdmin/transactionTplDetail', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserAutoLoginLinkIn
 * @property {String} path
 */
const UserAutoLoginLinkIn = {
  path: '', // string
}
/**
 * @typedef {Object} UserAutoLoginLinkOut
 * @property {String} link
 */
const UserAutoLoginLinkOut = {
  link: '', // string
}
/**
 * @callback UserAutoLoginLinkCallback
 * @param {UserAutoLoginLinkOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserAutoLoginLinkIn} i
 * @param {UserAutoLoginLinkCallback} cb
 * @returns {Promise}
 */
exports.UserAutoLoginLink = async function UserAutoLoginLink( i, cb ) {
  return await axios.post( '/user/autoLoginLink', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserChangePasswordIn
 * @property {String} oldPass
 * @property {String} newPass
 */
const UserChangePasswordIn = {
  oldPass: '', // string
  newPass: '', // string
}
/**
 * @typedef {Object} UserChangePasswordOut
 * @property {Object} ok
 */
const UserChangePasswordOut = {
  ok: false, // bool
}
/**
 * @callback UserChangePasswordCallback
 * @param {UserChangePasswordOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserChangePasswordIn} i
 * @param {UserChangePasswordCallback} cb
 * @returns {Promise}
 */
exports.UserChangePassword = async function UserChangePassword( i, cb ) {
  return await axios.post( '/user/changePassword', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserCreateCompanyIn
 * @property {number} company.id
 * @property {String} company.tenantCode
 * @property {String} company.name
 * @property {String} company.headTitle
 * @property {number} company.parentId
 * @property {Object} company.children
 * @property {number} company.orgType
 * @property {number} company.createdAt
 * @property {number} company.createdBy
 * @property {number} company.updatedAt
 * @property {number} company.updatedBy
 * @property {number} company.deletedAt
 * @property {number} company.deletedBy
 * @property {number} company.restoredBy
 */
const UserCreateCompanyIn = {
  company: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqAuth.Orgs
}
/**
 * @typedef {Object} UserCreateCompanyOut
 * @property {Object} ok
 * @property {number} company.id
 * @property {String} company.tenantCode
 * @property {String} company.name
 * @property {String} company.headTitle
 * @property {number} company.parentId
 * @property {Object} company.children
 * @property {number} company.orgType
 * @property {number} company.createdAt
 * @property {number} company.createdBy
 * @property {number} company.updatedAt
 * @property {number} company.updatedBy
 * @property {number} company.deletedAt
 * @property {number} company.deletedBy
 * @property {number} company.restoredBy
 */
const UserCreateCompanyOut = {
  ok: false, // bool
  company: { // rqAuth.Orgs
    id: 0, // uint64
    tenantCode: '', // string
    name: '', // string
    headTitle: '', // string
    parentId: 0, // uint64
    children: { // []any
    }, // []any
    orgType: 0, // uint64
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    deletedBy: 0, // uint64
    restoredBy: 0, // uint64
  }, // rqAuth.Orgs
}
/**
 * @callback UserCreateCompanyCallback
 * @param {UserCreateCompanyOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserCreateCompanyIn} i
 * @param {UserCreateCompanyCallback} cb
 * @returns {Promise}
 */
exports.UserCreateCompany = async function UserCreateCompany( i, cb ) {
  return await axios.post( '/user/createCompany', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserLogoutIn
 */
const UserLogoutIn = {
}
/**
 * @typedef {Object} UserLogoutOut
 * @property {number} logoutAt
 */
const UserLogoutOut = {
  logoutAt: 0, // int64
}
/**
 * @callback UserLogoutCallback
 * @param {UserLogoutOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserLogoutIn} i
 * @param {UserLogoutCallback} cb
 * @returns {Promise}
 */
exports.UserLogout = async function UserLogout( i, cb ) {
  return await axios.post( '/user/logout', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserProfileIn
 */
const UserProfileIn = {
}
/**
 * @typedef {Object} UserProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const UserProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserProfileIn} i
 * @param {UserProfileCallback} cb
 * @returns {Promise}
 */
exports.UserProfile = async function UserProfile( i, cb ) {
  return await axios.post( '/user/profile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserResponseInvitationIn
 * @property {String} tenantCode
 * @property {String} response
 */
const UserResponseInvitationIn = {
  tenantCode: '', // string
  response: '', // string
}
/**
 * @typedef {Object} UserResponseInvitationOut
 * @property {String} message
 */
const UserResponseInvitationOut = {
  message: '', // string
}
/**
 * @callback UserResponseInvitationCallback
 * @param {UserResponseInvitationOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserResponseInvitationIn} i
 * @param {UserResponseInvitationCallback} cb
 * @returns {Promise}
 */
exports.UserResponseInvitation = async function UserResponseInvitation( i, cb ) {
  return await axios.post( '/user/responseInvitation', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserSessionKillIn
 * @property {String} sessionTokenHash
 */
const UserSessionKillIn = {
  sessionTokenHash: '', // string
}
/**
 * @typedef {Object} UserSessionKillOut
 * @property {number} logoutAt
 * @property {number} sessionTerminated
 */
const UserSessionKillOut = {
  logoutAt: 0, // int64
  sessionTerminated: 0, // int64
}
/**
 * @callback UserSessionKillCallback
 * @param {UserSessionKillOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserSessionKillIn} i
 * @param {UserSessionKillCallback} cb
 * @returns {Promise}
 */
exports.UserSessionKill = async function UserSessionKill( i, cb ) {
  return await axios.post( '/user/sessionKill', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserSessionsActiveIn
 */
const UserSessionsActiveIn = {
}
/**
 * @typedef {Object} UserSessionsActiveOut
 * @property {Object} sessionsActive
 */
const UserSessionsActiveOut = {
  sessionsActive: { // []rqAuth.Sessions
  }, // []rqAuth.Sessions
}
/**
 * @callback UserSessionsActiveCallback
 * @param {UserSessionsActiveOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserSessionsActiveIn} i
 * @param {UserSessionsActiveCallback} cb
 * @returns {Promise}
 */
exports.UserSessionsActive = async function UserSessionsActive( i, cb ) {
  return await axios.post( '/user/sessionsActive', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}

/**
 * @typedef {Object} UserUpdateProfileIn
 * @property {String} userName
 * @property {String} fullName
 * @property {String} email
 * @property {String} country
 * @property {String} language
 */
const UserUpdateProfileIn = {
  userName: '', // string
  fullName: '', // string
  email: '', // string
  country: '', // string
  language: '', // string
}
/**
 * @typedef {Object} UserUpdateProfileOut
 * @property {number} user.id
 * @property {String} user.email
 * @property {String} user.password
 * @property {number} user.createdAt
 * @property {number} user.createdBy
 * @property {number} user.updatedAt
 * @property {number} user.updatedBy
 * @property {number} user.deletedAt
 * @property {number} user.passwordSetAt
 * @property {String} user.secretCode
 * @property {number} user.secretCodeAt
 * @property {number} user.verificationSentAt
 * @property {number} user.verifiedAt
 * @property {number} user.lastLoginAt
 * @property {String} user.fullName
 * @property {String} user.tenantCode
 * @property {String} user.role
 * @property {String} user.invitationState
 * @property {Object} segments
 */
const UserUpdateProfileOut = {
  user: { // rqAuth.Users
    id: 0, // uint64
    email: '', // string
    password: '', // string
    createdAt: 0, // int64
    createdBy: 0, // uint64
    updatedAt: 0, // int64
    updatedBy: 0, // uint64
    deletedAt: 0, // int64
    passwordSetAt: 0, // int64
    secretCode: '', // string
    secretCodeAt: 0, // int64
    verificationSentAt: 0, // int64
    verifiedAt: 0, // int64
    lastLoginAt: 0, // int64
    fullName: '', // string
    tenantCode: '', // string
    role: '', // string
    invitationState: '', // string
  }, // rqAuth.Users
  segments: { // M.SB
  }, // M.SB
}
/**
 * @callback UserUpdateProfileCallback
 * @param {UserProfileOut} o
 * @returns {Promise}
 */
/**
 * @param  {UserUpdateProfileIn} i
 * @param {UserUpdateProfileCallback} cb
 * @returns {Promise}
 */
exports.UserUpdateProfile = async function UserUpdateProfile( i, cb ) {
  return await axios.post( '/user/updateProfile', i ).
    then( wrapOk( cb ) ).
    catch( wrapErr( cb ) )
}


// Code generated by 1_codegen_test.go DO NOT EDIT.
